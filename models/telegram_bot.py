import os
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ForceReply
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters,
    CallbackContext
)
from recipe_finder import RecipeFinder
from speech_generator import SpeechGenerator
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
START, INGREDIENTS, WAITING_INPUT, STYLE, GENERATING_RECIPE, GENERATING_SPEECH = range(6)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

class BotState:
    _instance = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            try:
                cls._instance.recipe_finder = RecipeFinder()
                cls._instance.speech_generator = SpeechGenerator()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
                raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤.")
        return cls._instance

    @staticmethod
    def convert_style(style_code):
        style_map = {
            "L": "1",  # –õ–∞–≤–∫—Ä–∞—Ñ—Ç
            "G": "2",  # –ì–æ–ø–Ω–∏–∫
            "U": "3",  # –£–∏–ª—å—è–º –ë–µ—Ä—Ä–æ—É–∑
            "M": "4",   # –ú–∏–Ω–∏–º–∞–ª–∏–∑–º
            "T": "5",   # –¢–µ—Ä–≤–µ—Ä
            "E": "6"    # –õ–µ—Ç–æ–≤
        }
        return style_map.get(style_code, "4")

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [[InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç", callback_data="start_bot")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, –î–û–†–û–ì–û–ô –ë–†–ê–¢! –ô–∞ –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–∫—Ç–µ–π–ª–µ–π –ø–æ –º–æ—Ç–∏–≤–∞–º –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏, —á—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è —É —Ç–µ–±—è –≤–∫—É—Å–Ω–æ—Å—Ç–µ–π. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
        reply_markup=reply_markup,
    )
    return START

async def handle_ingredients(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    context.user_data.setdefault("ingredients", [])
    
    # –¢–µ–ø–µ—Ä—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–≤–æ–¥–∞ 
    keyboard = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", callback_data="activate_input")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç:",
        reply_markup=reply_markup
    )
    return INGREDIENTS

async def activate_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    context.user_data["current_state"] = "WAITING_INPUT"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await query.edit_message_text(text="–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç:")
    return "WAITING_INPUT"  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞

async def process_ingredient(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if context.user_data.get("current_state") != "WAITING_INPUT":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç', —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç.")
        return INGREDIENTS

    user_data = context.user_data
    ingredient = update.message.text
    
    if len(user_data.get("ingredients", [])) >= 3:
        await update.message.reply_text("–ú–∞–∫—Å–∏–º—É–º 3 –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞!")
        return INGREDIENTS
    
    user_data.setdefault("ingredients", []).append(ingredient)
    
    buttons = []
    if len(user_data["ingredients"]) < 3:
        buttons.append(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", callback_data="add_ingredient"))
    buttons.append(InlineKeyboardButton("‚ö° –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate"))
    
    keyboard = [buttons]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: {len(user_data['ingredients'])}/3",
        reply_markup=reply_markup,
    )
    return INGREDIENTS

async def select_style(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å —ç–º–æ–¥–∑–∏
    keyboard = [
        [
            InlineKeyboardButton("üëª –õ–∞–≤–∫—Ä–∞—Ñ—Ç", callback_data="style_L"),
            InlineKeyboardButton("üòé –¢–∏–ø–∏–∫–∞–ª –≥–æ–ø", callback_data="style_G"),
        ],
        [
            InlineKeyboardButton("üìñ –ë–µ—Ä—Ä–æ—É–∑", callback_data="style_U"),
            InlineKeyboardButton("üìù –°—Ç–∏–ª—å –º–µ–Ω—é", callback_data="style_M"),
        ],
        [
            InlineKeyboardButton("üìä –¢–µ–æ—Ä–≤–µ—Ä –∏ –º–∞—Ç—Å—Ç–∞—Ç", callback_data="style_T"),
            InlineKeyboardButton("üé∂ –ì—Ä–û–±", callback_data="style_E"),
        ],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å:", reply_markup=reply_markup)
    return STYLE

async def generate_recipe(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_data = context.user_data
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    progress_message = await query.edit_message_text(text="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–∞... üçæü•Ç")
    
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    for i in range(5):  # 5 —à–∞–≥–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏
        await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
        await query.edit_message_text(text="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–∞... üçæü•Ç" + " " * i + "üíß")
    
    try:
        bot_state = BotState()
        style = bot_state.convert_style(query.data.split("_")[1])
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞ —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏: {user_data['ingredients']}, —Å—Ç–∏–ª—å: {style}")
        
        recipe = await bot_state.recipe_finder.find_recipe(user_data["ingredients"], style)
        logger.info("–†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        
        user_data["recipe"] = recipe
        user_data["style"] = style
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"üçπ –í–∞—à —Ä–µ—Ü–µ–ø—Ç:\n\n{recipe}"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("üîä –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏", callback_data="synthesize"),
                InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=reply_markup,
        )
        return GENERATING_SPEECH
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {str(e)}", exc_info=True)
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –ª–∏–±–æ –∑–∞–≤–µ–¥–∏—Ç–µ –¥–µ—Ñ–µ–∫—Ç –≤ –∏–∑—ä—è–Ω–æ–æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç–µ–ª–µ https://github.com/trofimovelijah/cocktail_qr/issues/new"
        )
        return START

async def synthesize_speech(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(text="–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏...‚è≥")
    
    bot_state = BotState()
    audio_path = await bot_state.speech_generator.generate_speech(
        context.user_data["recipe"],
        context.user_data["style"]
    )
    
    with open(audio_path, "rb") as audio_file:
        await context.bot.send_audio(
            chat_id=query.message.chat_id,
            audio=audio_file,
            title="–†–µ—Ü–µ–ø—Ç –∫–æ–∫—Ç–µ–π–ª—è"
        )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
    context.user_data.clear()
    
    keyboard = [[InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="start_bot")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=reply_markup,
    )
    return START

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data.clear()
    await query.edit_message_text(text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    return await start_command(update, context)

async def new_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
    keyboard = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", callback_data="add_ingredient")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await query.edit_message_text(
        text="–ù–∞—á–Ω–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç.",
        reply_markup=reply_markup
    )
    
    return INGREDIENTS

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", exc_info=context.error)
    
    try:
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")

def create_dynamic_keyboard(buttons):
    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ä—è–¥—ã
    rows = []
    for i in range(0, len(buttons), 2):  # –î–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Ä—è–¥
        rows.append(buttons[i:i + 2])
    return InlineKeyboardMarkup(rows)

def main() -> None:
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start_command)],
        states={
            START: [
                CallbackQueryHandler(handle_ingredients, pattern="^start_bot$"),
            ],
            INGREDIENTS: [
                CallbackQueryHandler(activate_input, pattern="^activate_input$"),
                CallbackQueryHandler(select_style, pattern="^generate$"),
                CallbackQueryHandler(handle_ingredients, pattern="^add_ingredient$"),
                CallbackQueryHandler(cancel, pattern="^cancel$"),
                CallbackQueryHandler(new_search, pattern="^new_search$"),
            ],
            "WAITING_INPUT": [  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_ingredient),
            ],
            STYLE: [
                CallbackQueryHandler(generate_recipe, pattern="^style_"),
                CallbackQueryHandler(cancel, pattern="^cancel$"),
            ],
            GENERATING_SPEECH: [
                CallbackQueryHandler(synthesize_speech, pattern="^synthesize$"),
                CallbackQueryHandler(new_search, pattern="^new_search$"),
                CallbackQueryHandler(cancel, pattern="^cancel$"),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()